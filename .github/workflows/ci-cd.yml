name: BrightPath CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests (Java/Spring Boot)
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend  # Run commands in backend folder
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Backend
      run: mvn clean compile
      
    - name: Run Backend Unit Tests
      run: mvn test -Dtest=Course*Test
      
    - name: Run Backend UI Tests
      run: mvn test -Dtest=LoginUITest,CourseCreationUITest
      env:
        DISPLAY: ':99'
        CHROME_BIN: /usr/bin/google-chrome
      
    - name: Build Backend JAR
      run: mvn clean package -DskipTests

  # Frontend Tests (React/Angular/Vue)
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend  # Run commands in frontend folder
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Frontend Dependencies
      run: npm ci
      
    - name: Run Frontend Tests
      run: npm test -- --watchAll=false --coverage
      
    - name: Build Frontend
      run: npm run build

  # Overall Success Check
  check-success:
    needs: [backend-tests, frontend-tests]  # Wait for both to complete
    runs-on: ubuntu-latest
    if: success()  # Only run if both pass
    steps:
    - name: ðŸŽ‰ All Tests Passed!
      run: |
        echo "âœ… Backend and Frontend tests PASSED!"
        echo "ðŸ“¦ JAR and Frontend build artifacts ready for deployment"
